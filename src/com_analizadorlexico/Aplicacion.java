/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com_analizadorlexico;
/**
 *
 * @author Gaby
 */

import java.awt.Color;
import java.awt.GridBagLayout;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static javafx.scene.paint.Color.color;
import static javafx.scene.paint.Color.color;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import Tokens.Token;
import com_analizadorsintactico.ErroresSintacticos;
import com_analizadorsintactico.SintacticoAnalizador;

public class Aplicacion extends javax.swing.JFrame {

    private String titulo = "Analizador Lexico";
    private ArrayList<TokenAnalizador> tokensAnalizador;
    private LexicoAnalizador lexicoAnalizador;
    private int numeroLinea = 1;
    private String advertencia = "El archivo se a guardado automaticamente";
    private String error = "Compruebe los espacios en blanco";
    private String nombreArchivo = "";
    private JButton activarBoton;

     JFileChooser seleccionado = new JFileChooser();
    File archivo;
    byte[] bytesImg;
    GestionA gestion = new GestionA();
    
    public Aplicacion() {
        initComponents();

        
        this.setTitle(titulo);
        this.setLocationRelativeTo(null);
        tokensAnalizador = new ArrayList();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);

        txaEscribir.requestFocus();

    }

    public String quitaEspacios(String texto) {
        java.util.StringTokenizer tokens = new java.util.StringTokenizer(texto);
        StringBuilder buff = new StringBuilder();
        while (tokens.hasMoreTokens()) {
            if (buff.equals("\n")) {

            } else {
                buff.append(" ").append(tokens.nextToken());
            }
        }
        return buff.toString().trim();
    }

    public String ComentarioVariasLin(String palabra) {
        String cadenaLimpia = "";
        boolean addChar = true;

        System.out.println("");
        for (int i = 0; i < palabra.length(); i++) {
            if ((i + 2) < palabra.length() && palabra.substring(i, i + 2).equals("#=")) {
                //System.out.println("Detectado cadena /*");
                addChar = false;
            }

            if (i > 3 && palabra.substring(i - 2, i).equals("=#")) {
                //System.out.println("Detectado cadena /*");
                addChar = true;
            }
            if (addChar == true) {
                cadenaLimpia = cadenaLimpia + palabra.substring(i, i + 1);
            }
        }
        return cadenaLimpia;
    }
    String codigo;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btnAnalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAnalizador = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jpanelInterfazEscribir = new javax.swing.JPanel();
        txaEscribir = new javax.swing.JTextArea();
        txaLinea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        mensajetxt = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        btnAbrirArchivo = new javax.swing.JButton();
        btnGuardarTexto = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txaImprimir = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblTrans = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        txaSinta = new javax.swing.JTextArea();
        txaImprimir1 = new javax.swing.JTextArea();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAnalizar.setText("ANALIZAR");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });
        jPanel2.add(btnAnalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 120, 50));

        tblAnalizador.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tblAnalizador.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Linea", "Token            ", "Lexema"
            }
        ));
        jScrollPane1.setViewportView(tblAnalizador);
        if (tblAnalizador.getColumnModel().getColumnCount() > 0) {
            tblAnalizador.getColumnModel().getColumn(0).setMinWidth(50);
            tblAnalizador.getColumnModel().getColumn(0).setMaxWidth(13);
            tblAnalizador.getColumnModel().getColumn(1).setMinWidth(120);
            tblAnalizador.getColumnModel().getColumn(2).setMinWidth(100);
        }

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, 250, 230));

        jScrollPane2.setAutoscrolls(true);

        jpanelInterfazEscribir.setBackground(new java.awt.Color(102, 102, 255));
        jpanelInterfazEscribir.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        jpanelInterfazEscribir.setAutoscrolls(true);

        txaEscribir.setColumns(20);
        txaEscribir.setRows(5);
        txaEscribir.setWrapStyleWord(true);
        txaEscribir.setAutoscrolls(false);
        txaEscribir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txaEscribirKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txaEscribirKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txaEscribirKeyTyped(evt);
            }
        });

        txaLinea.setEditable(false);
        txaLinea.setColumns(20);
        txaLinea.setRows(5);
        txaLinea.setText("1");
        txaLinea.setAutoscrolls(false);

        javax.swing.GroupLayout jpanelInterfazEscribirLayout = new javax.swing.GroupLayout(jpanelInterfazEscribir);
        jpanelInterfazEscribir.setLayout(jpanelInterfazEscribirLayout);
        jpanelInterfazEscribirLayout.setHorizontalGroup(
            jpanelInterfazEscribirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelInterfazEscribirLayout.createSequentialGroup()
                .addComponent(txaLinea, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txaEscribir, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpanelInterfazEscribirLayout.setVerticalGroup(
            jpanelInterfazEscribirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txaEscribir, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
            .addComponent(txaLinea, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jScrollPane2.setViewportView(jpanelInterfazEscribir);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        jPanel3.setLayout(new java.awt.BorderLayout());
        jScrollPane3.setViewportView(jPanel3);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 600, -1));

        mensajetxt.setBackground(new java.awt.Color(153, 153, 153));
        mensajetxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        mensajetxt.setForeground(new java.awt.Color(0, 153, 0));
        jPanel2.add(mensajetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 360, 20));

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        jPanel2.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 349, -1, 40));

        btnAbrirArchivo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAbrirArchivo.setText("ABRIR ARCHIVO");
        btnAbrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirArchivoActionPerformed(evt);
            }
        });
        jPanel2.add(btnAbrirArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, -1, 50));

        btnGuardarTexto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnGuardarTexto.setText("GUARDAR TEXTO");
        btnGuardarTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarTextoActionPerformed(evt);
            }
        });
        jPanel2.add(btnGuardarTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, 150, 50));

        jLabel1.setText("Realizado por: Gracia Jonathan, Méndez Gabriela, Moreno Javier, Palacios Mario");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 36)); // NOI18N
        jLabel2.setText("JULIA");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 380, 100, 80));

        txaImprimir.setColumns(20);
        txaImprimir.setFont(new java.awt.Font("Arial Black", 0, 10)); // NOI18N
        txaImprimir.setRows(5);
        jPanel2.add(txaImprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 598, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 460));

        tblTrans.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0", "1", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"1", null, "2", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"2", null, null, "3", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"3", null, "4", "", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "5", null},
                {"4", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "5", null},
                {"5", null, null, null, "6", null, "3", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"6", null, "7", null, null, null, null, null, null, "13", "13", null, null, "29", "29", null, null, null, "43", "44", "58", null, null, null, "67", null, null},
                {"7", null, null, null, null, "8", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"8", null, "26", null, null, null, null, "12", "12", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"9", null, null, "10", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"10", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"11", null, null, null, "12", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"12", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "6"},
                {"13", null, null, "14", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"14", null, "15", null, null, null, null, null, null, null, null, "16", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"15", null, "", null, "23", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"16", null, "17", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"17", null, "", null, null, null, null, null, null, null, null, "18", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"18", null, null, null, "23", null, "19", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"19", null, "20", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"20", null, null, null, null, null, null, null, null, null, null, null, "21", null, null, "", null, null, null, null, null, null, null, null, null, null, null},
                {"21", null, "22", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"22", null, "", null, "23", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"23", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "6"},
                {"24", null, "", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"25", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"26", null, null, null, null, null, null, null, null, null, null, null, "27", null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"27", null, "28", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"28", null, "", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "6"},
                {"29", null, "31", null, null, null, null, "30", "30", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"30", null, "", null, null, null, null, null, null, null, null, null, null, null, null, "36", null, null, null, null, null, null, null, null, null, null, null},
                {"31", null, null, null, null, "32", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"32", null, "33", null, null, null, null, null, "33", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"33", null, "", null, null, null, null, null, null, null, null, null, "34", null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"34", null, "35", null, null, null, null, null, "35", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"35", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "36", null, null, null, null, null, null, null, null, null, null, "33"},
                {"36", null, "38", null, null, null, null, "37", "37", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"37", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "29", "29", null, null, null, null, null, null, null, null, "6"},
                {"38", null, null, null, null, "39", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"39", null, "40", null, null, null, null, null, "40", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"40", null, null, null, null, null, null, null, null, null, null, null, "41", null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"41", null, "42", null, null, null, null, null, "42", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"42", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "29", "29", null, null, null, null, null, null, null, null, "6"},
                {"43", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "6"},
                {"44", null, "45", null, null, null, null, "50", "50", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"45", null, null, null, null, "46", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"46", null, "47", null, null, null, null, null, "47", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"47", null, null, null, null, null, null, null, null, null, null, null, "48", null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"48", null, "49", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"49", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "51", null, null, null, null, null, null, null, null, null, null, "47"},
                {"50", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "51", null, null, null, null, null, null, null, null, null, null, null},
                {"51", "", "53", null, null, null, null, "52", "52", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"52", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "6"},
                {"53", null, null, null, null, "54", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"54", null, "55", null, null, null, null, null, "55", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"55", null, null, null, null, null, null, null, null, null, null, null, "56", null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"56", null, "57", null, null, null, null, null, "57", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"57", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "6"},
                {"58", null, "59", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"59", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "60", null, null, null, null, null},
                {"60", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "61", null, null, null, null},
                {"61", null, null, "62", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"62", null, null, null, null, null, null, null, "63", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"63", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "64", null, null, null},
                {"64", null, null, null, null, null, null, null, "65", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"65", null, null, null, "66", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"66", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "6"},
                {"67", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "6", null, null}
            },
            new String [] {
                "Estado", "function", "identificador", "(", ")", "=", ",", "letras", "numeros", "println", "print", "\"", "operador", "if", "elseif", "operador_condicion", "&&", "||", "else", "while", "for", "in", "range", ":", "end", "avance", "retroceso"
            }
        ));
        jScrollPane4.setViewportView(tblTrans);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, 1200, 220));

        txaSinta.setColumns(20);
        txaSinta.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        txaSinta.setForeground(new java.awt.Color(255, 0, 0));
        txaSinta.setRows(5);
        jScrollPane5.setViewportView(txaSinta);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 200, 420, 220));

        txaImprimir1.setColumns(20);
        txaImprimir1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        txaImprimir1.setForeground(new java.awt.Color(255, 0, 0));
        txaImprimir1.setRows(5);
        getContentPane().add(txaImprimir1, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 30, 420, 140));
        getContentPane().add(filler1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 460, 670, 120));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txaEscribirKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txaEscribirKeyReleased

    }//GEN-LAST:event_txaEscribirKeyReleased

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed

        codigo = ComentarioVariasLin(txaEscribir.getText());
        String[] lineas = codigo.split("\n");
        String aux = "";
        System.out.println(codigo);

        for (int i = 0; i < lineas.length; i++) { //separamos las lineas y buscamos comentarios
            if (!lineas[i].equals("")) {
                lineas[i] = quitaEspacios(lineas[i]); // llamamos al metodo para eliminar espacios demás
                if (lineas[i].contains("#")) {
                    String[] borrarC = lineas[i].split("#");
                    lineas[i] = borrarC[0];
                    
                }
                //para llamar a metodo de linea
                aux += lineas[i] + "\n";
            }
        }
        codigo = aux;

        System.out.println(codigo);
        try {
            if (!codigo.equals("")) { //Comprueba que no este vacia la caja de texto
                //gestionFichero.guardarFichero(codigo, nombreArchivo);
                /**
                 * Envia toda la cadena de la caja de texto al constructo
                 * LexicoAnalizador (clase)
                 */
                lexicoAnalizador = new LexicoAnalizador(codigo);
                //Llama al metodo analizar
                tokensAnalizador = lexicoAnalizador.analizarCodigo();
                //borrar color letras
                borrarColor();
                //vacia la tabla
                DefaultTableModel modelo = (DefaultTableModel) tblAnalizador.getModel();
                int filas = tblAnalizador.getRowCount() - 1;
                for (int i = filas; i >= 0; i--) {
                    modelo.removeRow(i);
                }

                Token t = new Token();
                String mensajeErrores = "";
                //Tomar los tokens reconocidos 
                  int al=0;
                for (TokenAnalizador token : tokensAnalizador) {
                    //Cuando si es un token
                    if (!token.getToken().equalsIgnoreCase(t.getSIMBOLOSNORECONOCIDOS())) {
                        modelo.addRow(new Object[]{token.getLinenext(), token.getToken(), token.getLexema()});
                    }
                    //Cuando no es un token
                    if (token.getToken().equalsIgnoreCase(t.getSIMBOLOSNORECONOCIDOS())) {
                        mensajeErrores += "Error : El lexema " + token.getLexema() + " ubicado en la línea " + token.getLinenext() + " no es reconocido.\n";
                        pintarPalabra(txaEscribir, token.getLexema());
                         al=-1; 
                    }
                }
                 System.out.println("Log: al="+al);
                /*
                ANALISIS SINTACTICO 
                */
                
 if (al!=-1) {
                    txaSinta.setText("");
                    mensajetxt.setText("");
                    
                    //Llenar matriz, columna 0 es la de los 
                    DefaultTableModel tblTran=(DefaultTableModel)tblTrans.getModel();
                   
                    String [][]matriz=new String[tblTran.getColumnCount()-1][tblTran.getRowCount()];
                    for (int i = 1; i <=matriz.length ; i++) { //26
                        for (int j = 0; j <matriz[0].length; j++) { //83
                            if (tblTrans.getValueAt(j, i)==null) {
                                matriz[i-1][j]="x";
                                
                            }else{
                                matriz[i-1][j]=tblTrans.getValueAt(j,i).toString(); //Primera columna no la tiene en cuenta
                                
                            } 
                        }
                    }
                    System.out.println("Log: Matriz creada");
                    SintacticoAnalizador sa=new SintacticoAnalizador(matriz, tokensAnalizador);
                    if(sa.analizadorSintactico()){ //Return true
                        System.out.println("Exito");
                        mensajetxt.setText("Sintáctico correcto");
                        
                    }else{ //Return false
                        System.out.println("Log: Error sintáctico");
                        txaSinta.setText("Error sintáctico");
                        ArrayList es=sa.getEs();
                        ErroresSintacticos esin;
                        for (int i = 0; i < es.size(); i++) {
                            
                            esin=(ErroresSintacticos)(es.get(i));
                            txaSinta.setText("Error sintáctico en la linea: "+esin.getPos()+". Se espera: "+
                                    tblTrans.getColumnModel().getColumn(esin.getToken()).getHeaderValue());
                        }
                    }
                }else{
                    System.out.println("log: Error léxico, error sintáctico");
                    txaSinta.setText("Error léxico, error sintáctico");
                }
                txaImprimir.setText(mensajeErrores);
            } else {
                String errorAbrir = "Deber abrir el archivo";
                JOptionPane.showMessageDialog(null, errorAbrir, "Error", JOptionPane.ERROR);
            }

        } catch (Exception e) {
           // txaImprimir.setText(error);
        }

    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void txaEscribirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txaEscribirKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txaEscribirKeyPressed

    private void txaEscribirKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txaEscribirKeyTyped
        char tecla = evt.getKeyChar();

        if ((int) tecla == KeyEvent.VK_ENTER) {
            numeroLinea++;
            String num = txaLinea.getText() + '\n' + numeroLinea;
            txaLinea.setText(num);
        }
        if ((int) tecla == KeyEvent.VK_BACK_SPACE || (int) tecla == KeyEvent.VK_DELETE) {

            //El while es pos si se eliminan varias lineas a la vez
            while (numeroLinea > txaEscribir.getLineCount()) {
                String num = txaLinea.getText();

                //Cuando el numero de lineas es solo un digito
                if (txaEscribir.getLineCount() < numeroLinea) {
                    if (numeroLinea < 10) {
                        num = num.substring(0, num.length() - 2);
                        txaLinea.setText(num);
                        numeroLinea--;
                    }
                    //Cuando el numero de lineas son dos digitos
                    if (numeroLinea > 9 && numeroLinea < 100) {
                        num = num.substring(0, num.length() - 3);
                        txaLinea.setText(num);
                        numeroLinea--;
                    }
                    //Cuando el numero de lineas son 3 digidos
                    if (numeroLinea > 99 && numeroLinea < 1000) {
                        num = num.substring(0, num.length() - 4);
                        txaLinea.setText(num);
                        numeroLinea--;
                    }
                }
            }
        }
        //Por si se pegan varias lineas a la vez
        if ((int) tecla == 22) {
            while (numeroLinea < txaEscribir.getLineCount()) {
                numeroLinea++;
                String num = txaLinea.getText() + '\n' + numeroLinea;
                txaLinea.setText(num);
            }
        }
    }//GEN-LAST:event_txaEscribirKeyTyped


    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txaEscribir.setText("");
        txaImprimir.setText("");
        txaLinea.setText("");
        txaLinea.setText("1");
        DefaultTableModel modelo = (DefaultTableModel) tblAnalizador.getModel();
        int filas = tblAnalizador.getRowCount() - 1;
        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAbrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirArchivoActionPerformed
        if(seleccionado.showDialog(null, "ABRIR ARCHIVO") == JFileChooser.APPROVE_OPTION){
            archivo = seleccionado.getSelectedFile();
            if(archivo.canRead()){
                if(archivo.getName().endsWith("txt")){
                    String contenido = gestion.AbrirATexto(archivo);
                    txaEscribir.setText(contenido);
                }
            }
        }
    }//GEN-LAST:event_btnAbrirArchivoActionPerformed

    private void btnGuardarTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarTextoActionPerformed
        if(seleccionado.showDialog(null, "GUARDAR TEXTO") == JFileChooser.APPROVE_OPTION){
            archivo = seleccionado.getSelectedFile();
            if(archivo.getName().endsWith("txt")){
                String contenido = txaEscribir.getText();
                String respuesta = gestion.GuardarATexto(archivo, contenido);
                if(respuesta!=null){
                    JOptionPane.showMessageDialog(null, respuesta);
                }else{
                    JOptionPane.showMessageDialog(null, "Error al guardar texto.");
                }
            }else{
                JOptionPane.showMessageDialog(null, "El texto se debe guardar en un formato de texto.");
            }
        }
    }//GEN-LAST:event_btnGuardarTextoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Aplicacion().setVisible(true);
            }
        });
    }

    public void pintarPalabra(JTextArea txaEscribir, String texto) {
        if (texto.length() >= 1) {

            Color color = new Color(255, 168, 168);
            DefaultHighlighter.DefaultHighlightPainter hp = new DefaultHighlighter.DefaultHighlightPainter(color);
            Highlighter h = txaEscribir.getHighlighter();
            //h.removeAllHighlights();
            String text = codigo;
            String caracter = texto;
            Pattern p = Pattern.compile("(?i)" + caracter);
            Matcher m = p.matcher(text);
            while (m.find()) {
                try {
                    h.addHighlight(m.start(), m.end(), hp);
                } catch (BadLocationException ex) {
                    System.out.println("Error pintar");
                }
            }
        }

    }

    public void borrarColor() {

        Highlighter h = txaEscribir.getHighlighter();
        h.removeAllHighlights();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirArchivo;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnGuardarTexto;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPanel jpanelInterfazEscribir;
    private javax.swing.JLabel mensajetxt;
    private javax.swing.JTable tblAnalizador;
    private javax.swing.JTable tblTrans;
    private javax.swing.JTextArea txaEscribir;
    private javax.swing.JTextArea txaImprimir;
    private javax.swing.JTextArea txaImprimir1;
    private javax.swing.JTextArea txaLinea;
    private javax.swing.JTextArea txaSinta;
    // End of variables declaration//GEN-END:variables
}
